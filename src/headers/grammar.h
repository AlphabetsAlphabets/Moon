// According to https://craftinginterpreters.com/representing-code.html#metaprogramming-the-trees
// This file should be autogenerated based on the grammar provided.
//
// EXPR -> LITERAL | UNARY | BINARY | GROUPING
typedef enum ExprType { LITERAL, UNARY, BINARY, GROUPING } ExprType;

typedef struct Expr {
    char *value;
    ExprType type;
} Expr;

// LITERAL -> number | string | "TRUE" | "FALSE"
typedef enum LiteralType { TRUE, FALSE, NUMBER, STRING } LiteralType;

typedef struct Literal {
    char *value;
    LiteralType type;
} Literal;

// UNARY -> ("!" | "-") EXPR
typedef struct Unary {
    char *value;
    Expr expr;
} Unary;

// OP -> "+" | "-" | "*" | "/" | "%" |
//       "==" | "!=" | "<" | ">" | ">=" | "<="
typedef struct OP {
    char *value;
} OP;

// BINARY -> EXPR OP EXPR
typedef struct Binary {
    Expr left;
    OP op;
    Expr right;
} Binary;

// GROUPING -> "(" EXPR ")"
typedef struct Grouping {
    Expr expr;
} Grouping;
